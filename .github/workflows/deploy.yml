name: CI/CD Pipeline

on:
  push:
    branches: [vps-fixes, main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 3) Install deps
      - name: Install dependencies
        run: npm ci

      # 3.1) Ensure upload folders exist
      - name: Prepare upload folders
        run: |
          mkdir -p public/uploads/posts
          mkdir -p public/uploads/featured-posts
          mkdir -p public/uploads/logo-slider

      # 4) Lint (and placeholder tests)
      - name: Lint & placeholder tests
        run: |
          npm run lint
          echo "No tests yet"

      # 5) Build
      - name: Build
        run: npm run build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DBNAME: ${{ secrets.MONGODB_DBNAME }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Debug build output
        run: |
          echo "üìÇ Current directory: $(pwd)"
          echo "üìÇ Top-level folders after build:"
          find . -maxdepth 1 -type d | sort
          echo "üîç Checking for ./.next and ./public..."
          [ -d ./.next ] || (echo "‚ùå ./.next missing" && exit 1)
          [ -d ./public ] || (echo "‚ùå ./public missing" && exit 1)
          echo "‚úÖ Found ./.next and ./public"

      # 6) Make sure target dir exists on VPS
      - name: Ensure VPS connection and target directory exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "üìç $(hostname)"
            echo "üìÇ PWD: $(pwd)"
            echo "üìú /home/deploy before:"
            ls -al /home/deploy || true
            mkdir -p /home/deploy/gargofx
            echo "üìú /home/deploy/gargofx after mkdir:"
            ls -al /home/deploy/gargofx || true

      # Pack artifacts locally, excluding uploads
      - name: Pack artifacts (exclude uploads)
        run: |
            tar -czf release.tgz \
              --exclude='public/uploads/**' \
              .next public package.json package-lock.json

      # Copy the tarball to the VPS
      - name: Upload release.tgz
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: release.tgz
          target: /home/deploy/gargofx
          debug: true

      # Extract and restart
      - name: Extract & restart
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /home/deploy/gargofx
            echo "üì¶ Extracting release.tgz"
            tar -xzf release.tgz
            rm -f release.tgz
            echo "üìú public/uploads preserved:"
            ls -al public/uploads || echo "uploads missing (first deploy?)"
            pm2 reload gargofx --update-env || pm2 start npm --name "gargofx" -- run start
            pm2 save