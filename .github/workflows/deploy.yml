name: CI/CD Pipeline

on:
  push:
    branches: [vps-fixes, main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 3) Install deps
      - name: Install dependencies
        run: npm ci

      # 3.1) Ensure upload folders exist
      - name: Prepare upload folders
        run: |
          mkdir -p public/uploads/posts
          mkdir -p public/uploads/featured-posts
          mkdir -p public/uploads/logo-slider

      # 4) Lint (and placeholder tests)
      - name: Lint & placeholder tests
        run: |
          npm run lint
          echo "No tests yet"

      # 5) Build
      - name: Build
        run: npm run build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DBNAME: ${{ secrets.MONGODB_DBNAME }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Debug build output
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory tree after build:"
          ls -R .
          echo "Checking for .next and public folders..."

          if [ ! -d ".next" ]; then
            echo "❌ ERROR: .next folder is missing!"
            exit 1
          fi

          if [ ! -d "public" ]; then
            echo "❌ ERROR: public folder is missing!"
            exit 1
          fi

          echo "✅ .next and public folders exist."

          echo "Contents of public:"
          ls -al public

      # 6) Make sure target dir exists on VPS
      - name: Ensure target directory exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p /home/deploy/gargofx

      # 7) Ship artifacts
      - name: Deploy to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: |
            .next/**
            package.json
            package-lock.json
            public
          target: /home/deploy/gargofx

      # 8) Restart app with PM2 (no setup, assumes already installed & configured)
      - name: Restart app (PM2)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /home/deploy/gargofx
            pm2 reload gargofx --update-env || pm2 start npm --name "gargofx" -- run start
            pm2 save